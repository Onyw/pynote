__new__和__init__功能上的区别
__new__和__init__的主要区别在于：
__new__是用来创造一个类的实例的（constructor），
而__init__是用来初始化一个实例的（initializer）。

Python的新类和旧类
Python中的类分为新类和旧类。旧类是Python3之前的类，旧类并不是默认继承object类，而是继承type类。
在Python3中所有的类均默认继承object，所以并不需要显式地指定object为基类。
以object为基类可以使得所定义的类具有新类所对应的方法（methods）和属性（properties）。

__new__和__init__参数的不同
__new__所接收的第一个参数是cls，而__init__所接收的第一个参数是self。
这是因为当我们调用__new__的时候，该类的实例还并不存在（也就是self所引用的对象还不存在），所以需要接收一个类作为参数，从而产生一个实例。
而当我们调用__init__的时候，实例已经存在，因此__init__接受self作为第一个参数并对该实例进行必要的初始化操作。
这也意味着__init__是在__new__之后被调用的。

Python旧类中的__new__和__init__
Python的旧类中实际上并没有__new__方法。
因为旧类中的__init__实际上起构造器的作用。
实际上，除非显式调用：oldStyleClass.__new__(oldStyleClass)，该类中的__new__方法中的内容永远不会被调用。
因为旧类构造实例并不会调用__new__方法。
这意味着对于Python的旧类而言，我们无法控制__init__函数的返回值。

Python新类中的__new__和__init__
Python的新类允许用户重载__new__和__init__方法，且这两个方法具有不同的作用。
__new__作为构造器，起创建一个类实例的作用。
而__init__作为初始化器，起初始化一个已被创建的实例的作用。

创建类实例并初始化的过程中__new__和__init__被调用的顺序：__new__函数首先被调用，构造了一个newStyleClass的实例，
接着__init__函数在__new__函数返回一个实例的时候被调用，并且这个实例作为self参数被传入了__init__函数。

如果我们在__new__函数中不返回任何对象，则__init__函数也不会被调用。

总结几个点
__init__不能有返回值
__new__函数直接上可以返回别的类的实例。如上面例子中的returnExistedObj类的__new__函数返回了一个int值。
只有在__new__返回一个新创建属于该类的实例时当前类的__init__才会被调用。
